#
# /*
#  *
#  * ******************************************************************************
#  *
#  *  Copyright (c) 2023-24 Harman International
#  *
#  *
#  *
#  *  Licensed under the Apache License, Version 2.0 (the "License");
#  *
#  *  you may not use this file except in compliance with the License.
#  *
#  *  You may obtain a copy of the License at
#  *
#  *
#  *
#  *  http://www.apache.org/licenses/LICENSE-2.0
#  *
#  **
#  *  Unless required by applicable law or agreed to in writing, software
#  *
#  *  distributed under the License is distributed on an "AS IS" BASIS,
#  *
#  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  *
#  *  See the License for the specific language governing permissions and
#  *
#  *  limitations under the License.
#  *
#  *
#  *
#  *  SPDX-License-Identifier: Apache-2.0
#  *
#  *  *******************************************************************************
#  *
#  */
#

#Alert duplication properties
dedup.alerts=true
alert.deduplicator.key.store=org.eclipse.ecsp.notification.key.store.RedisStore
alert.deduplicator.key.store.ttl.in.seconds=3600
dedup.interval.ms=0
#We will move to Mongo key store when it's ready for bounce handler
aws.ses.bounce.handler.key.store=org.eclipse.ecsp.notification.key.store.RedisStore
aws.ses.bounce.handler.enable=true
aws.ses.bounce.handler.frequency.mins=60
aws.ses.bounce.queue=haa-harman-dev-ses-bounce
#Less than 0 implies persist forever
aws.ses.bounce.handler.key.store.ttl.in.seconds=-1
#Redis properties
redis.address=127.0.0.1:6379
redis.sentinels=
redis.master.name=
redis.dns.monitoring.interval=5000
redis.read.mode=SLAVE
redis.subscription.mode=SLAVE
redis.subscription.conn.min.idle.size=1
redis.subscription.conn.pool.size=50
redis.slave.conn.min.idle.size=32
redis.slave.pool.size=64
redis.master.conn.min.idle.size=32
redis.master.conn.pool.size=64
redis.idle.conn.timeout=10000
redis.conn.timeout=10000
redis.timeout=3000
redis.retry.attempts=5
redis.retry.interval=10000
redis.reconnection.timeout=3000
redis.failed.attempts=3
redis.database=0
redis.password=
redis.subscriptions.per.conn=5
redis.client.name=yellow
redis.conn.min.idle.size=32
redis.conn.pool.size=64
redis.cluster.masters=
redis.scan.interval=2000
redis.scan.limit=10
redis.regex.scan.filename=scanregex.txt
redis.netty.threads=0
redis.decode.in.executor=false
health.redis.monitor.enabled=false
health.redis.needs.restart.on.failure=false
redis.executor.threads=64
redis.keep.alive=true
redis.ping.connection.interval=60000
redis.tcp.no.delay=true
redis.transport.mode=NIO
##Bloom filter expecting insertion count
dedup.bloom.filter.insert.count=1000
health.mqtt.monitor.enabled=false
health.mongo.monitor.enabled=false
health.kafka.consumer.group.monitor.enabled=false
health.device.status.backdoor.monitor.enabled=false
health.dff.feed.backdoor.monitor.enabled=false
health.kafka.topics.monitor.enabled=false
health.redis.monitor.enabled=false
metrics.prometheus.enabled=false